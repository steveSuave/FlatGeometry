// Mocks generated by Mockito 5.4.5 from annotations
// in geometry_app/test/tool_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:flutter/material.dart' as _i7;
import 'package:geometry_app/models/command.dart' as _i8;
import 'package:geometry_app/models/coordinate_system.dart' as _i3;
import 'package:geometry_app/models/geometry_object.dart' as _i6;
import 'package:geometry_app/models/geometry_state.dart' as _i5;
import 'package:geometry_app/models/point.dart' as _i9;
import 'package:geometry_app/tools/geometry_tool.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTool_0 extends _i1.SmartFake implements _i2.Tool {
  _FakeTool_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCoordinateSystem_1 extends _i1.SmartFake
    implements _i3.CoordinateSystem {
  _FakeCoordinateSystem_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOffset_2 extends _i1.SmartFake implements _i4.Offset {
  _FakeOffset_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GeometryState].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeometryState extends _i1.Mock implements _i5.GeometryState {
  MockGeometryState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ToolType get currentToolType =>
      (super.noSuchMethod(
            Invocation.getter(#currentToolType),
            returnValue: _i2.ToolType.point,
          )
          as _i2.ToolType);

  @override
  _i2.Tool get currentTool =>
      (super.noSuchMethod(
            Invocation.getter(#currentTool),
            returnValue: _FakeTool_0(this, Invocation.getter(#currentTool)),
          )
          as _i2.Tool);

  @override
  List<_i6.GeometryObject> get objects =>
      (super.noSuchMethod(
            Invocation.getter(#objects),
            returnValue: <_i6.GeometryObject>[],
          )
          as List<_i6.GeometryObject>);

  @override
  bool get isDragging =>
      (super.noSuchMethod(Invocation.getter(#isDragging), returnValue: false)
          as bool);

  @override
  _i6.DragMode get currentDragMode =>
      (super.noSuchMethod(
            Invocation.getter(#currentDragMode),
            returnValue: _i6.DragMode.none,
          )
          as _i6.DragMode);

  @override
  _i3.CoordinateSystem get coordinateSystem =>
      (super.noSuchMethod(
            Invocation.getter(#coordinateSystem),
            returnValue: _FakeCoordinateSystem_1(
              this,
              Invocation.getter(#coordinateSystem),
            ),
          )
          as _i3.CoordinateSystem);

  @override
  _i4.Offset get panOffset =>
      (super.noSuchMethod(
            Invocation.getter(#panOffset),
            returnValue: _FakeOffset_2(this, Invocation.getter(#panOffset)),
          )
          as _i4.Offset);

  @override
  double get zoomScale =>
      (super.noSuchMethod(Invocation.getter(#zoomScale), returnValue: 0.0)
          as double);

  @override
  double get baseScaleFactor =>
      (super.noSuchMethod(Invocation.getter(#baseScaleFactor), returnValue: 0.0)
          as double);

  @override
  double get pointSelectionThreshold =>
      (super.noSuchMethod(
            Invocation.getter(#pointSelectionThreshold),
            returnValue: 0.0,
          )
          as double);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setTool(_i2.ToolType? type) => super.noSuchMethod(
    Invocation.method(#setTool, [type]),
    returnValueForMissingStub: null,
  );

  @override
  void updateSelectionThreshold(_i7.BuildContext? context) =>
      super.noSuchMethod(
        Invocation.method(#updateSelectionThreshold, [context]),
        returnValueForMissingStub: null,
      );

  @override
  void executeCommand(_i8.Command? command) => super.noSuchMethod(
    Invocation.method(#executeCommand, [command]),
    returnValueForMissingStub: null,
  );

  @override
  void undo() => super.noSuchMethod(
    Invocation.method(#undo, []),
    returnValueForMissingStub: null,
  );

  @override
  void redo() => super.noSuchMethod(
    Invocation.method(#redo, []),
    returnValueForMissingStub: null,
  );

  @override
  bool canUndo() =>
      (super.noSuchMethod(Invocation.method(#canUndo, []), returnValue: false)
          as bool);

  @override
  bool canRedo() =>
      (super.noSuchMethod(Invocation.method(#canRedo, []), returnValue: false)
          as bool);

  @override
  void addObjectWithoutHistory(_i6.GeometryObject? object) =>
      super.noSuchMethod(
        Invocation.method(#addObjectWithoutHistory, [object]),
        returnValueForMissingStub: null,
      );

  @override
  void removeObjectWithoutHistory(_i6.GeometryObject? object) =>
      super.noSuchMethod(
        Invocation.method(#removeObjectWithoutHistory, [object]),
        returnValueForMissingStub: null,
      );

  @override
  void setSelectedObjectWithoutNotifying(_i6.GeometryObject? object) =>
      super.noSuchMethod(
        Invocation.method(#setSelectedObjectWithoutNotifying, [object]),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListenersWithoutHistory() => super.noSuchMethod(
    Invocation.method(#notifyListenersWithoutHistory, []),
    returnValueForMissingStub: null,
  );

  @override
  void zoomIn() => super.noSuchMethod(
    Invocation.method(#zoomIn, []),
    returnValueForMissingStub: null,
  );

  @override
  void zoomOut() => super.noSuchMethod(
    Invocation.method(#zoomOut, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetView() => super.noSuchMethod(
    Invocation.method(#resetView, []),
    returnValueForMissingStub: null,
  );

  @override
  void updateZoom(double? scale) => super.noSuchMethod(
    Invocation.method(#updateZoom, [scale]),
    returnValueForMissingStub: null,
  );

  @override
  void updatePan(_i4.Offset? delta) => super.noSuchMethod(
    Invocation.method(#updatePan, [delta]),
    returnValueForMissingStub: null,
  );

  @override
  void setBaseScaleFactor(double? factor) => super.noSuchMethod(
    Invocation.method(#setBaseScaleFactor, [factor]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Offset screenToCanvasCoordinates(_i4.Offset? screenPosition) =>
      (super.noSuchMethod(
            Invocation.method(#screenToCanvasCoordinates, [screenPosition]),
            returnValue: _FakeOffset_2(
              this,
              Invocation.method(#screenToCanvasCoordinates, [screenPosition]),
            ),
          )
          as _i4.Offset);

  @override
  void clearSelection() => super.noSuchMethod(
    Invocation.method(#clearSelection, []),
    returnValueForMissingStub: null,
  );

  @override
  void selectObject(_i6.GeometryObject? object) => super.noSuchMethod(
    Invocation.method(#selectObject, [object]),
    returnValueForMissingStub: null,
  );

  @override
  void addPoint(_i4.Offset? position) => super.noSuchMethod(
    Invocation.method(#addPoint, [position]),
    returnValueForMissingStub: null,
  );

  @override
  void startLine(_i4.Offset? position) => super.noSuchMethod(
    Invocation.method(#startLine, [position]),
    returnValueForMissingStub: null,
  );

  @override
  void completeLine(_i4.Offset? position) => super.noSuchMethod(
    Invocation.method(#completeLine, [position]),
    returnValueForMissingStub: null,
  );

  @override
  void startCircle(_i4.Offset? position) => super.noSuchMethod(
    Invocation.method(#startCircle, [position]),
    returnValueForMissingStub: null,
  );

  @override
  void completeCircle(_i4.Offset? position) => super.noSuchMethod(
    Invocation.method(#completeCircle, [position]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Point? findNearbyPoint(_i4.Offset? position) =>
      (super.noSuchMethod(Invocation.method(#findNearbyPoint, [position]))
          as _i9.Point?);

  @override
  _i6.GeometryObject? findObjectAtPosition(_i4.Offset? position) =>
      (super.noSuchMethod(Invocation.method(#findObjectAtPosition, [position]))
          as _i6.GeometryObject?);

  @override
  void startDrag(_i4.Offset? position) => super.noSuchMethod(
    Invocation.method(#startDrag, [position]),
    returnValueForMissingStub: null,
  );

  @override
  void updateDrag(_i4.Offset? position) => super.noSuchMethod(
    Invocation.method(#updateDrag, [position]),
    returnValueForMissingStub: null,
  );

  @override
  void endDrag() => super.noSuchMethod(
    Invocation.method(#endDrag, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
